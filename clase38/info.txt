Clase 38 - Seguridad

========================================================================================================================

OWASP: organismo internacional que se encarga de mejorar la seguridad/ciberseguridad.
https://owasp.org

========================================================================================================================

OWASP Top 10: muestra las 10 vulnerabilidades principales. Se actualiza cada 3/4 años.

A01:2021 - Broken Access Control: se logra acceder a un recurso al cual no debería tener acceso.
A02:2021 - Cryptographic failures: cuando se usa descuidadamente algún proceso que requiere un proceso criptográfico.
A03:2021 - Injection: se trata de cualquier inserción de información por parte del usuario con el fin de poder romper alguna consulta o bien, con el fin de obtener información sensible.
A04:2021 - Insecure Design: no es CSS. El diseño se da en términos generales dentro de la construcción de una aplicación.
A05:2021 - Security Misconfiguration
A06:2021 - Vulnerable and outdated components: se encuentra al momento en el que un componente (ya sea externo o de nuestro aplicativo), se vuelve obsoleto o mantiene una vulnerabilidad que no ha sido subsanada en cierto tiempo. Ejemplo: no actualizar librerías con vulnerabilidades reportadas.
A07:2021 - Identification and autentication failures: se encuentra a lo largo de todo el proceso en el que un usuario puede autenticarse. Éstas permiten que el usuario pueda forzar una autenticación, o acceder a información que haya sido
tratada de manera errónea. Ejemplo: guardar contraseñas sin hashear.
A08:2021 - Software and Data Integrity Failures: se encuentra cuando hacemos un uso desmedido de módulos, librerías o integraciones generales de fuentes no confiables, o bien, que presentan alguna vulnerabilidad en algún momento.
A09:2021 - Logging and monitoring failures: se presenta cuando no tenemos una correcta gestión de los logs del aplicativo y del monitoreo del mismo.
A10:2021 - Server Side Request Forgery (SSRF): se encuentra cuando la aplicación no valida la URL que envía un usuario al momento de acceder a un recurso remoto.

========================================================================================================================

Ejercicio en Clase - Detectar Errores de Seguridad/Vulnerabilidades en cada uno de estos proyectos:

https://github.com/CoderContenidos/RecursosBackend-Vulnerabilidades

Proyecto 1: 

    npm audit (vulnerabilidades)
    npm outdate (desactualizaciones)

    sessions.router.js
    - No desestructura el req.body
    - No hashea el password
    - No hay validaciones
    - El console.log del user es inseguro
    - No tiene try-catch ni async-await

    register.handlebars
    - La contraseña no se oculta
    - Es texto plano, sin identificar/especificar a qué hace referencia cada dato

    app.js
    - No hay variables de entorno (.env) para ocultar el puerto

Proyecto 2: 

    npm audit (vulnerabilidades)
    npm outdate (desactualizaciones)

    - Falta un .env para MONGOURL y PUERTO
    - No valida el formulario
    - Falta  de especificaciones en los labels e inputs de las views (login / register)

Proyecto 3: 

    npm audit (vulnerabilidades)
    npm outdate (desactualizaciones)

    - No mejoró nunca las views
    - En el profile.handlebars muestra la contraseña
    - El middleware de autenticación es inseguro ya que no valida la información dentro de la CoderCookie
    - No está el .gitignore para el .env
    - El'C0DerSecret' del token debería de estar oculto en el .env
    - Aplicar Factory y Singleton
    - Aplicar Loggers

========================================================================================================================